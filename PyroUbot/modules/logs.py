from pyrogram.enums import ChatType

from PyroUbot import *

__MODULE__ = "logs"
__HELP__ = """
<b>„Äé  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ã·¥Ä…¥…¢ „Äè</b>

  <b>‚Ä¢ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú:</b> <code>{0}logs</code> (on/off)
  <b>‚Ä¢ ·¥ò·¥á…¥·¥ä·¥á ü·¥Äs·¥Ä…¥:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ ·¥Ä·¥õ·¥Ä·¥ú ·¥ç·¥á…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü·¥è…¢s
"""


@ubot.on_message(filters.group & filters.mentioned & filters.incoming, group=4)
@ubot.on_message(
    filters.private
    & filters.incoming
    & ~filters.me
    & ~filters.bot
    & ~filters.via_bot
    & ~filters.service, group=5
)
async def _(client, message):
    logs = await get_vars(client.me.id, "ID_LOGS")
    on_logs = await get_vars(client.me.id, "ON_LOGS")
    if logs and on_logs:
        if message.chat.type == ChatType.PRIVATE:
            type = "·¥ò Ä…™·¥†·¥Ä·¥õ·¥á"
            from_user = message.chat
            id_link = f"tg://openmessage?user_id={from_user.id}&message_id={message.id}"
        elif message.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP):
            type = "…¢ Ä·¥è·¥ú·¥ò"
            from_user = message.from_user
            id_link = message.link
        rpk = f"[{from_user.first_name} {from_user.last_name or ''}](tg://user?id={from_user.id})"
        link = f"[·¥ã ü…™·¥ã ·¥Ö…™s…™…¥…™]({id_link})"
        await client.send_message(
            int(logs),
            f"""
<b>üì© ·¥Ä·¥Ö·¥Ä ·¥ò·¥ás·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã</b>
    <b>‚Ä¢> ·¥õ…™·¥ò·¥á ·¥ò·¥ás·¥Ä…¥:</b> <code>{type}</code>
    <b>‚Ä¢>  ü…™…¥·¥ã ·¥ò·¥ás·¥Ä…¥:</b> {link}
    
<b>‚§µÔ∏è ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú …™…¥…™ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú ·¥ò·¥ás·¥Ä…¥ ·¥õ·¥á Ä·¥ús·¥Ä…¥ ·¥Ö·¥Ä Ä…™: {rpk}</b>
""",
        )
        return await message.forward(int(logs))


@PY.UBOT("logs")
async def _(client, message):
    if len(message.command) < 2:
        return await message.reply(
            " ú·¥Ä Ä·¥Ä·¥ò  ô·¥Ä·¥Ñ·¥Ä ·¥ç·¥á…¥·¥ú  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥á·¥õ·¥Ä ú·¥ú…™ ·¥Ñ·¥Ä Ä·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥Ä…¥…¥ è·¥Ä."
        )

    query = {"on": True, "off": False, "none": False}
    command = message.command[1].lower()

    if command not in query:
        return await message.reply("·¥è·¥òs…™ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥†·¥Ä ü…™·¥Ö.  ú·¥Ä Ä·¥Ä·¥ò …¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ 'on' ·¥Ä·¥õ·¥Ä·¥ú 'off'.")

    value = query[command]

    vars = await get_vars(client.me.id, "ID_LOGS")

    if not vars:
        logs = await create_logs(client)
        await set_vars(client.me.id, "ID_LOGS", logs)

    if command == "none" and vars:
        try:
            await client.delete_channel(vars)
        except Exception:
            pass
        await set_vars(client.me.id, "ID_LOGS", value)

    await set_vars(client.me.id, "ON_LOGS", value)
    return await message.reply(
        f"<b>‚úÖ <code>LOGS</code>  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™s·¥á·¥õ·¥õ…™…¥…¢ ·¥ã·¥á:</b> <code>{value}</code>"
    )


async def create_logs(client):
    logs = await client.create_channel(f"Logs Ubot: {bot.me.username}")
    await client.set_chat_photo(
        logs.id,
        photo="storage/Bocil_Logs.jpg",
    )
    return logs.id
